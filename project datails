{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOK4DY/YxGMPS3cOuVOG9F4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sathviksr2001/E-commerce-product-recommendation/blob/main/project%20datails\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install --upgrade pip\n",
        "!pip install scikit-surprise --no-cache-dir --progress-bar off\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "paEpupSMh6v0",
        "outputId": "fc972bb4-0ad6-4228-979a-ca4291e7938d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pip in /usr/local/lib/python3.11/dist-packages (24.1.2)\n",
            "Collecting pip\n",
            "  Downloading pip-25.0.1-py3-none-any.whl.metadata (3.7 kB)\n",
            "Downloading pip-25.0.1-py3-none-any.whl (1.8 MB)\n",
            "\u001b[2K   \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m1.8/1.8 MB\u001b[0m \u001b[31m46.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pip\n",
            "  Attempting uninstall: pip\n",
            "    Found existing installation: pip 24.1.2\n",
            "    Uninstalling pip-24.1.2:\n",
            "      Successfully uninstalled pip-24.1.2\n",
            "Successfully installed pip-25.0.1\n",
            "Collecting scikit-surprise\n",
            "  Downloading scikit_surprise-1.1.4.tar.gz (154 kB)\n",
            "  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-surprise) (1.4.2)\n",
            "Requirement already satisfied: numpy>=1.19.5 in /usr/local/lib/python3.11/dist-packages (from scikit-surprise) (2.0.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-surprise) (1.14.1)\n",
            "Building wheels for collected packages: scikit-surprise\n",
            "  Building wheel for scikit-surprise (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for scikit-surprise: filename=scikit_surprise-1.1.4-cp311-cp311-linux_x86_64.whl size=2505221 sha256=8d3ed8c6cedd86efe39db91c5473d7f83b737345412faaffc80bc694bdee2961\n",
            "  Stored in directory: /tmp/pip-ephem-wheel-cache-xzftk5wd/wheels/2a/8f/6e/7e2899163e2d85d8266daab4aa1cdabec7a6c56f83c015b5af\n",
            "Successfully built scikit-surprise\n",
            "Installing collected packages: scikit-surprise\n",
            "Successfully installed scikit-surprise-1.1.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import gradio as gr\n",
        "import pandas as pd\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.metrics.pairwise import linear_kernel, cosine_similarity\n",
        "\n",
        "# ----------- Sample Product Data with Images -----------\n",
        "product_data = {\n",
        "    'P1': {\n",
        "        'title': 'Wireless Mouse',\n",
        "        'description': 'Ergonomic wireless mouse with 2.4GHz connectivity',\n",
        "        'image': 'https://m.media-amazon.com/images/I/61LtuGzXeaL._AC_SL1500_.jpg'\n",
        "    },\n",
        "    'P2': {\n",
        "        'title': 'Gaming Keyboard',\n",
        "        'description': 'RGB mechanical gaming keyboard with fast response',\n",
        "        'image': 'https://m.media-amazon.com/images/I/71c5U8Z8J2L._AC_SL1500_.jpg'\n",
        "    },\n",
        "    'P3': {\n",
        "        'title': 'USB-C Hub',\n",
        "        'description': '7-in-1 USB-C hub with HDMI, USB, SD card support',\n",
        "        'image': 'https://m.media-amazon.com/images/I/61Khp7gFUsL._AC_SL1500_.jpg'\n",
        "    },\n",
        "    'P4': {\n",
        "        'title': 'Laptop Stand',\n",
        "        'description': 'Adjustable laptop stand for desk ergonomics',\n",
        "        'image': 'https://m.media-amazon.com/images/I/61GkT3zMDOL._AC_SL1500_.jpg'\n",
        "    }\n",
        "}\n",
        "\n",
        "# ----------- Create Product DataFrame -----------\n",
        "products_df = pd.DataFrame([\n",
        "    {'product_id': pid, 'title': data['title'], 'description': data['description']}\n",
        "    for pid, data in product_data.items()\n",
        "])\n",
        "\n",
        "# ----------- TF-IDF Vectorizer for Content-Based Filtering -----------\n",
        "tfidf = TfidfVectorizer(stop_words='english')\n",
        "tfidf_matrix = tfidf.fit_transform(products_df['description'])\n",
        "cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\n",
        "\n",
        "# ----------- Content-Based Recommender Function -----------\n",
        "def recommend_by_product(selected_pid):\n",
        "    if selected_pid not in product_data:\n",
        "        return \"Invalid product ID\"\n",
        "    idx = products_df[products_df['product_id'] == selected_pid].index[0]\n",
        "    sim_scores = list(enumerate(cosine_sim[idx]))\n",
        "    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:3]\n",
        "    recommended_ids = [products_df.iloc[i[0]]['product_id'] for i in sim_scores]\n",
        "    return format_product_cards(recommended_ids)\n",
        "\n",
        "# ----------- Collaborative Filtering using User Rating Similarity -----------\n",
        "rating_data = pd.DataFrame({\n",
        "    'user_id': ['U1', 'U1', 'U2', 'U3', 'U3'],\n",
        "    'product_id': ['P1', 'P2', 'P2', 'P3', 'P4'],\n",
        "    'rating': [5, 4, 5, 3, 4]\n",
        "})\n",
        "\n",
        "rating_matrix = rating_data.pivot(index='user_id', columns='product_id', values='rating').fillna(0)\n",
        "user_similarity = cosine_similarity(rating_matrix)\n",
        "user_sim_df = pd.DataFrame(user_similarity, index=rating_matrix.index, columns=rating_matrix.index)\n",
        "\n",
        "def simple_collab_filter(user_id):\n",
        "    if user_id not in rating_matrix.index:\n",
        "        return \"User not found.\"\n",
        "    similar_users = user_sim_df[user_id].sort_values(ascending=False)[1:]\n",
        "    top_user = similar_users.idxmax()\n",
        "    recommended_products = rating_matrix.loc[top_user][rating_matrix.loc[user_id] == 0]\n",
        "    top_products = recommended_products.sort_values(ascending=False).index.tolist()[:2]\n",
        "    return top_products\n",
        "\n",
        "def recommend_by_user(user_id):\n",
        "    top_ids = simple_collab_filter(user_id)\n",
        "    return format_product_cards(top_ids)\n",
        "\n",
        "# ----------- Format Product Display Cards like Flipkart -----------\n",
        "def format_product_cards(product_ids):\n",
        "    cards = \"\"\n",
        "    for pid in product_ids:\n",
        "        prod = product_data[pid]\n",
        "        cards += f\"\"\"\n",
        "        <div style=\"display:inline-block; width:200px; margin:10px; border:1px solid #ccc; border-radius:10px; padding:10px\">\n",
        "            <img src=\"{prod['image']}\" style=\"width:100%; height:150px; object-fit:contain; border-radius:5px\"/><br>\n",
        "            <b>{prod['title']}</b><br>\n",
        "            <p style=\"font-size:12px;\">{prod['description']}</p>\n",
        "        </div>\n",
        "        \"\"\"\n",
        "    return cards\n",
        "\n",
        "# ----------- Gradio Flipkart-Style UI -----------\n",
        "with gr.Blocks() as demo:\n",
        "    gr.Markdown(\"## üõçÔ∏è E-commerce Product Recommendation Engine\")\n",
        "\n",
        "    with gr.Tab(\"üéØ Content-Based\"):\n",
        "        gr.Markdown(\"Recommend similar products based on what user is viewing.\")\n",
        "        product_input = gr.Dropdown(choices=list(product_data.keys()), label=\"Choose a Product\")\n",
        "        product_button = gr.Button(\"Get Recommendations\")\n",
        "        product_output = gr.HTML()\n",
        "        product_button.click(fn=recommend_by_product, inputs=product_input, outputs=product_output)\n",
        "\n",
        "    with gr.Tab(\"üë§ Collaborative Filtering\"):\n",
        "        gr.Markdown(\"Recommend based on what similar users liked.\")\n",
        "        user_input = gr.Dropdown(choices=list(rating_matrix.index), label=\"Choose a User\")\n",
        "        user_button = gr.Button(\"Get Recommendations\")\n",
        "        user_output = gr.HTML()\n",
        "        user_button.click(fn=recommend_by_user, inputs=user_input, outputs=user_output)\n",
        "\n",
        "demo.launch(share=True)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 611
        },
        "id": "LHg45mrwiqe_",
        "outputId": "358c4e03-df96-4562-a8e0-090ba21fb99f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n",
            "* Running on public URL: https://83f8531dd7111786e3.gradio.live\n",
            "\n",
            "This share link expires in 1 week. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<div><iframe src=\"https://83f8531dd7111786e3.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": []
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    }
  ]
}